# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PydictUi.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from bs4 import BeautifulSoup
import requests
import pandas
import urllib3, urllib

baseUrl = "https://translate.google.com/"

class Ui_MainWindow(object):

    pathCsv = "Dict.csv"

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        icon = QtGui.QIcon("PydictLogo.png")
        MainWindow.setWindowIcon(icon)
        MainWindow.resize(318, 350)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.radioButtonEng = QtWidgets.QRadioButton(MainWindow)
        self.radioButtonEng.setGeometry(QtCore.QRect(80, 250, 80, 20))
        self.radioButtonEng.setChecked(True)
        self.radioButtonEng.setObjectName("radioButtonEnglish")

        self.radioButtonPer = QtWidgets.QRadioButton(MainWindow)
        self.radioButtonPer.setGeometry(QtCore.QRect(170, 250, 80, 20))
        self.radioButtonPer.setObjectName("radioButtonPersian")

        self.submitButton = QtWidgets.QPushButton(self.centralwidget)
        self.submitButton.setGeometry(QtCore.QRect(100, 60, 110, 40))
        self.submitButton.setObjectName("submitButton")
        self.submitButton.clicked.connect(self.translatebtn)

        self.getString = QtWidgets.QTextEdit(self.centralwidget)
        self.getString.setGeometry(QtCore.QRect(30, 10, 250, 35))
        self.getString.setObjectName("getString")

        self.labelForTranslate = QtWidgets.QLabel(self.centralwidget)
        self.labelForTranslate.setGeometry(QtCore.QRect(40, 130, 245, 150))
        self.labelForTranslate.setTextFormat(QtCore.Qt.AutoText)
        self.labelForTranslate.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.labelForTranslate.setObjectName("labelForTranslate")

        self.labelForShowLogo = QtWidgets.QLabel(self.centralwidget)
        self.labelForShowLogo.setGeometry(QtCore.QRect(130, 260, 61, 51))
        self.labelForShowLogo.setPixmap(QtGui.QPixmap("PydictLogo.png"))
        self.labelForShowLogo.setScaledContents(True)
        self.labelForShowLogo.setObjectName("labelForShowLogo")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 318, 26))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.changeCsv)

        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.exitProgram)

        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Pydict"))
        self.submitButton.setText(_translate("MainWindow", "Translate"))
        self.labelForTranslate.setText(_translate("MainWindow", ""))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.radioButtonEng.setText(_translate("WizardPage", "English"))
        self.radioButtonPer.setText(_translate("WizardPage", "Persian"))

    def checkRadiobtn(self):
        radioBtnSelected = ""
        if self.radioButtonEng.isChecked():
            radioBtnSelected = self.radioButtonEng.text()
        else:
            radioBtnSelected = self.radioButtonPer.text()
        return radioBtnSelected

    def setText(self):
        string = self.getString.toPlainText()
        return string

    def changeCsv(self):
        csvFile = QFileDialog.getOpenFileName()
        splitpath = csvFile[0].split("/")
        if ".csv" in splitpath[-1]:
            self.pathCsv = csvFile[0]

    def readCsvFile(self):
        dataFrameDict = pandas.read_csv(self.pathCsv)
        return dataFrameDict

    def messageError(self, message):
        icon = QtGui.QIcon("PydictLogo.png")
        msg = QMessageBox()
        msg.setWindowIcon(icon)
        msg.setWindowTitle("Pydict")
        msg.setText(message)
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Retry)
        e = msg.exec_()

    def searchInSite(self):
        inputText = self.setText()
        inputText = inputText.replace(" ","+")
        lt, ls = self.selectLanguage()
        if lt == "farsi":
            lt = "fa"
        else:
            lt = "en"
        if ls == "farsi":
            ls = "fa"
        else:
            ls = "en"
        urlTraslate = baseUrl + "?sl="+ls+"&tl="+lt+"&text="+inputText+"&op=translate"
        getInfo = requests.get(urlTraslate)
        getPage = BeautifulSoup(getInfo.content, "html5lib")
        div = getPage.find_all('div', {"class": "J0lOec"})
        self.labelForTranslate.setText(div.get_text())

    def selectLanguage(self):
        languageSelected = self.checkRadiobtn().lower()
        languageTranslate = ""
        if languageSelected == "persian":
            languageTranslate = "english"
        else:
            languageTranslate = "farsi"

        if languageSelected == "persian":
            languageSelected = "farsi"
        return languageTranslate, languageSelected

    def translate(self, df):
        inputText = self.setText()
        lt, ls = self.selectLanguage()
        try:
            for i in range(len(df)):
                if df[ls][i] == inputText:
                    indexfindword = df.index[df[ls] == inputText].tolist().pop()
                    return df[lt][indexfindword]
                else:
                    continue
            """self.messageError("not exist in this database.we have try in google translate.")
            self.searchInSite()"""
        except:
            self.messageError("We have find Error!!!")


    def exitProgram(self):
        exit(0)

    def translatebtn(self):
        textShow = self.translate(self.readCsvFile())
        self.labelForTranslate.setText(textShow)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
